/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';
/**
 * Allows modal overflow area to be scrollable via keyboard.
 * The modal body will focus with keyboard navigation only.
 * This allows inner focusable items to be focused without
 * the overflow scroll being focused.
 */
export class ClrModalBody {
    constructor(renderer, host, ngZone) {
        this.renderer = renderer;
        this.host = host;
        this.tabindex = '0';
        this.unlisteners = [];
        ngZone.runOutsideAngular(() => {
            new ResizeObserver(() => this.addOrRemoveTabIndex()).observe(this.host.nativeElement);
            this.unlisteners.push(this.renderer.listen(this.host.nativeElement, 'mouseup', () => {
                // set the tabindex binding back when click is completed with mouseup
                this.addOrRemoveTabIndex();
            }), this.renderer.listen(this.host.nativeElement, 'mousedown', () => {
                // tabindex = 0 binding should be removed
                // so it won't be focused when click starts with mousedown
                this.removeTabIndex();
            }));
        });
    }
    ngOnDestroy() {
        while (this.unlisteners.length) {
            this.unlisteners.pop()();
        }
    }
    addTabIndex() {
        this.renderer.setAttribute(this.host.nativeElement, 'tabindex', this.tabindex);
    }
    removeTabIndex() {
        this.renderer.removeAttribute(this.host.nativeElement, 'tabindex');
    }
    addOrRemoveTabIndex() {
        const modalBody = this.host.nativeElement.parentElement;
        if (modalBody.clientHeight < modalBody.scrollHeight) {
            this.addTabIndex();
        }
        else {
            this.removeTabIndex();
        }
    }
}
ClrModalBody.decorators = [
    { type: Directive, args: [{ selector: '.modal-body' },] }
];
ClrModalBody.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtYm9keS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXIvc3JjL21vZGFsL21vZGFsLWJvZHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBYSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEY7Ozs7O0dBS0c7QUFFSCxNQUFNLE9BQU8sWUFBWTtJQUl2QixZQUE2QixRQUFtQixFQUFtQixJQUE2QixFQUFFLE1BQWM7UUFBbkYsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFtQixTQUFJLEdBQUosSUFBSSxDQUF5QjtRQUh4RixhQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ2YsZ0JBQVcsR0FBbUIsRUFBRSxDQUFDO1FBR3ZDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDNUIsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUV0RixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRTtnQkFDNUQscUVBQXFFO2dCQUNyRSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUM3QixDQUFDLENBQUMsRUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFO2dCQUM5RCx5Q0FBeUM7Z0JBQ3pDLDBEQUEwRDtnQkFDMUQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU8sV0FBVztRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFTyxtQkFBbUI7UUFDekIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1FBRXhELElBQUksU0FBUyxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsWUFBWSxFQUFFO1lBQ25ELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjthQUFNO1lBQ0wsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUU7OztZQVJhLFNBQVM7WUFBeEMsVUFBVTtZQUFFLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjIgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgTmdab25lLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEFsbG93cyBtb2RhbCBvdmVyZmxvdyBhcmVhIHRvIGJlIHNjcm9sbGFibGUgdmlhIGtleWJvYXJkLlxuICogVGhlIG1vZGFsIGJvZHkgd2lsbCBmb2N1cyB3aXRoIGtleWJvYXJkIG5hdmlnYXRpb24gb25seS5cbiAqIFRoaXMgYWxsb3dzIGlubmVyIGZvY3VzYWJsZSBpdGVtcyB0byBiZSBmb2N1c2VkIHdpdGhvdXRcbiAqIHRoZSBvdmVyZmxvdyBzY3JvbGwgYmVpbmcgZm9jdXNlZC5cbiAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnLm1vZGFsLWJvZHknIH0pXG5leHBvcnQgY2xhc3MgQ2xyTW9kYWxCb2R5IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSB0YWJpbmRleCA9ICcwJztcbiAgcHJpdmF0ZSB1bmxpc3RlbmVyczogVm9pZEZ1bmN0aW9uW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgcmVhZG9ubHkgaG9zdDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIG5nWm9uZTogTmdab25lKSB7XG4gICAgbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlVGFiSW5kZXgoKSkub2JzZXJ2ZSh0aGlzLmhvc3QubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgIHRoaXMudW5saXN0ZW5lcnMucHVzaChcbiAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQsICdtb3VzZXVwJywgKCkgPT4ge1xuICAgICAgICAgIC8vIHNldCB0aGUgdGFiaW5kZXggYmluZGluZyBiYWNrIHdoZW4gY2xpY2sgaXMgY29tcGxldGVkIHdpdGggbW91c2V1cFxuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVUYWJJbmRleCgpO1xuICAgICAgICB9KSxcbiAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQsICdtb3VzZWRvd24nLCAoKSA9PiB7XG4gICAgICAgICAgLy8gdGFiaW5kZXggPSAwIGJpbmRpbmcgc2hvdWxkIGJlIHJlbW92ZWRcbiAgICAgICAgICAvLyBzbyBpdCB3b24ndCBiZSBmb2N1c2VkIHdoZW4gY2xpY2sgc3RhcnRzIHdpdGggbW91c2Vkb3duXG4gICAgICAgICAgdGhpcy5yZW1vdmVUYWJJbmRleCgpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHdoaWxlICh0aGlzLnVubGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy51bmxpc3RlbmVycy5wb3AoKSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkVGFiSW5kZXgoKSB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQsICd0YWJpbmRleCcsIHRoaXMudGFiaW5kZXgpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVUYWJJbmRleCgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmhvc3QubmF0aXZlRWxlbWVudCwgJ3RhYmluZGV4Jyk7XG4gIH1cblxuICBwcml2YXRlIGFkZE9yUmVtb3ZlVGFiSW5kZXgoKSB7XG4gICAgY29uc3QgbW9kYWxCb2R5ID0gdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudDtcblxuICAgIGlmIChtb2RhbEJvZHkuY2xpZW50SGVpZ2h0IDwgbW9kYWxCb2R5LnNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5hZGRUYWJJbmRleCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbW92ZVRhYkluZGV4KCk7XG4gICAgfVxuICB9XG59XG4iXX0=